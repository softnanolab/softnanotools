#!/usr/bin/env python
"""_project.py - auto-generated by softnanotools."""
from typing import List, Union
from pathlib import Path
from . import _package

from softnanotools.logger import Logger
logger = Logger(__name__)

ASSETS = Path(__file__).parent / "assets"

def execute_template(fname: str) -> str:
    return

def write_template(folder: Union[str, Path], fname: str):
    return

def generate(
    name,
    packages: List[str] = None,
    modules: List[str] = None,
    github_actions: bool = False,
    tests: bool = False,
    code_cov: bool = False,
    versioneer: bool = False,
    root=None,
):

    templates = {}

    # create folder with random string
    if root is None:
        root = Path(name)
    root.mkdir(exist_ok=True)

    # create main package
    _package.generate(root / name, modules=modules, packages=packages)

    # create list of files to generate
    filenames = [
        "setup.py",
        "README.md",
        "setup.cfg",
    ]

    # loop over files
    for fname in filenames:

        # copy template from assets folder
        with open(ASSETS / f"{fname}.template", "r") as f:
            templates[f"{fname}"] = f.read()

        # add debug statement
        logger.debug(templates[f"{fname}"])

        # create target file
        with open(root / f"{fname}", "w") as f:
            # write templated version with {subs} substitution rules
            f.write(
                templates[f"{fname}"].format(
                    **{
                        'name': name,
                    }
                )
            )
    return


if __name__ == "__main__":
    import doctest

    doctest.testmod()
